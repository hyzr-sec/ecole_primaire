Sujet2 : Gestion d’une école primaire
Cet article propose une application Java la gestion des étudiants avec
interface graphique en utilisant les fichiers Utilisation :
• Ajouter, modifier et supprimer un enseignant *
• Ajouter (étudiants, filières et matières)
• Modifier (étudiants, filières et matières)
• Supprimer (étudiants, filières et matières)
• Saisie de notes.
• Affichage des moyennes, statistiques et quelques autres options

InspectView
EleveView
EnseignantView
NoteView



Sujet2 : Gestion d’une école primaire
Cet article propose une application Java la gestion des étudiants avec
interface graphique en utilisant les fichiers Utilisation :
• Ajouter, modifier et supprimer un enseignant *
• Ajouter (étudiants, filières et matières)
• Modifier (étudiants, filières et matières)
• Supprimer (étudiants, filières et matières)
• Saisie de notes.
• Affichage des moyennes, statistiques et quelques autres options

InspectView
EleveView
EnseignantView
NoteView



Etudiant(Etud_Id, Nom_Etudiant, #Filiere_Id)
Matière(Subj_Id, nom_Matiere, #Filiere_Id, #Enseignant_Id)
Filiere(Filiere_Id, Nom_Filiere, Instructeur)
Enseignant(Enseignant_Id, nom_enseignant )
Note(#Etud_Id, #Subj_Id, Note )

public class SchoolController {

    @FXML
    private TableView<Student> studentsTable;

    // Add a new student
    @FXML
    private void handleAddStudent(ActionEvent event) {
        // Open a dialog to add a new student
        Student newStudent = showStudentDialog();
        if (newStudent != null) {
            studentsTable.getItems().add(newStudent);
        }
    }

    // Modify an existing student
    @FXML
    private void handleModifyStudent(ActionEvent event) {
        Student selectedStudent = studentsTable.getSelectionModel().getSelectedItem();
        if (selectedStudent != null) {
            Student modifiedStudent = showStudentDialog(selectedStudent);
            if (modifiedStudent != null) {
                studentsTable.getItems().set(studentsTable.getSelectionModel().getSelectedIndex(), modifiedStudent);
            }
        }
    }

    // Delete a student
    @FXML
    private void handleDeleteStudent(ActionEvent event) {
        Student selectedStudent = studentsTable.getSelectionModel().getSelectedItem();
        if (selectedStudent != null) {
            studentsTable.getItems().remove(selectedStudent);
        }
    }

    // View details of a student
    @FXML
    private void handleViewStudentDetails(ActionEvent event) {
        Student selectedStudent = studentsTable.getSelectionModel().getSelectedItem();
        if (selectedStudent != null) {
            // Show a new scene or dialog with student details
            showStudentDetailsDialog(selectedStudent);
        }
    }

    // Method to show a dialog for adding or modifying a student
    private Student showStudentDialog() {
        // Implementation for opening a dialog to input student data
        // Returns a new Student object based on user input
    }

    private Student showStudentDialog(Student student) {
        // Same as above, but pre-fills the dialog with the student's data
        // Returns the modified Student object
    }

    // Method to show a dialog for viewing student details
    private void showStudentDetailsDialog(Student student) {
        // Show a detailed view of the student in a dialog
    }
}


authentication scene
if admin:
      etudiant
      enseignant
      filiere
      matiere
if enseignant:
      filiere
      matiere
if etudiant:
      filiere
      matiere
      note


queries:
CREATE DATABASE ecole_primaire;
insert into users (username, password, role) values ('admin', 'very_bad_password', 'directeur');
CREATE USER 'java'@'localhost' IDENTIFIED BY 'my_very_good_password';
GRANT ALL PRIVILEGES ON ecole_primaire.* TO 'java'@'localhost';

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('directeur', 'enseignant', 'eleve') NOT NULL,
);

credentials:
directeure:
